diff -Naur a/Camomile/internal/byte_labeled_dag.ml b/Camomile/internal/byte_labeled_dag.ml
--- a/Camomile/internal/byte_labeled_dag.ml	2019-08-08 08:10:33.000000000 +0100
+++ b/Camomile/internal/byte_labeled_dag.ml	2020-01-12 18:28:47.618918498 +0000
@@ -87,7 +87,7 @@
           branch.(Char.code c') <- Some node;
           scan d c leaf branch rest
   in
-  let comp (s1, _) (s2, _) = Pervasives.compare s1 s2 in
+  let comp (s1, _) (s2, _) = Stdlib.compare s1 s2 in
   let vs = List.sort comp vs in
   match vs with
     (_, _) :: _ ->
diff -Naur a/Camomile/public/charEncoding.ml b/Camomile/public/charEncoding.ml
--- a/Camomile/public/charEncoding.ml	2019-08-08 08:10:33.000000000 +0100
+++ b/Camomile/public/charEncoding.ml	2020-01-12 18:28:47.632918083 +0000
@@ -131,12 +131,12 @@
       {!OOChannel.obj_output_channel} which
       receives Unicode characters and outputs them to [outchan] using
       the encoding [enc]. *)
-  class out_channel : t -> Pervasives.out_channel -> [UChar.t] obj_output_channel
+  class out_channel : t -> Stdlib.out_channel -> [UChar.t] obj_output_channel
 
   (** [new in_channel enc inchan] creates the intput channel object
       {!OOChannel.obj_input_channel} which
       reads bytes from [inchan] and converts them to Unicode characters. *)
-  class in_channel : t -> Pervasives.in_channel -> [UChar.t] obj_input_channel
+  class in_channel : t -> Stdlib.in_channel -> [UChar.t] obj_input_channel
 
   (** [ustream_of enc chars] converts the byte stream [chars]
       to the Unicode character stream by the encoding [enc]. *)
diff -Naur a/Camomile/public/charEncoding.mli b/Camomile/public/charEncoding.mli
--- a/Camomile/public/charEncoding.mli	2019-08-08 08:10:33.000000000 +0100
+++ b/Camomile/public/charEncoding.mli	2020-01-12 18:28:45.995966579 +0000
@@ -130,12 +130,12 @@
       {!OOChannel.obj_output_channel} which
       receives Unicode characters and outputs them to [outchan] using
       the encoding [enc]. *)
-  class out_channel : t -> Pervasives.out_channel -> [UChar.t] obj_output_channel
+  class out_channel : t -> Stdlib.out_channel -> [UChar.t] obj_output_channel
 
   (** [new in_channel enc inchan] creates the intput channel object 
       {!OOChannel.obj_input_channel} which
       reads bytes from [inchan] and converts them to Unicode characters. *)
-  class in_channel : t -> Pervasives.in_channel -> [UChar.t] obj_input_channel
+  class in_channel : t -> Stdlib.in_channel -> [UChar.t] obj_input_channel
 
   (** [ustream_of enc chars] converts the byte stream [chars] 
       to the Unicode character stream by the encoding [enc]. *)
diff -Naur a/Camomile/public/oOChannel.mli b/Camomile/public/oOChannel.mli
--- a/Camomile/public/oOChannel.mli	2019-08-08 08:10:33.000000000 +0100
+++ b/Camomile/public/oOChannel.mli	2020-01-12 18:28:45.996966549 +0000
@@ -113,7 +113,7 @@
   [char] obj_output_channel
 
 (** Convert an OCaml input channel to an OO-based character input channel *)
-class of_in_channel : Pervasives.in_channel -> char_input_channel
+class of_in_channel : Stdlib.in_channel -> char_input_channel
 
 (** Convert an OCaml output channel to an OO-based character output channel *)
-class of_out_channel : Pervasives.out_channel -> char_output_channel
+class of_out_channel : Stdlib.out_channel -> char_output_channel
diff -Naur a/Camomile/public/uCol.ml b/Camomile/public/uCol.ml
--- a/Camomile/public/uCol.ml	2019-08-08 08:10:33.000000000 +0100
+++ b/Camomile/public/uCol.ml	2020-01-12 18:28:47.638917905 +0000
@@ -52,14 +52,14 @@
       If [prec] is omitted, the maximum possible strength is used.
       If [variable] is omitted, the default of the locale
       (usually [`Shifted]) is used.
-      The meaning of the returned value is similar to Pervasives.compare *)
+      The meaning of the returned value is similar to Stdlib.compare *)
   val compare :
     ?locale:string -> ?prec:precision -> ?variable:variable_option ->
     text -> text -> int
 
   (** Binary comparison of sort_key gives the same result as [compare].
       i.e.
-      [compare t1 t2 = Pervasives.compare (sort_key t1) (sort_key t2)]
+      [compare t1 t2 = Stdlib.compare (sort_key t1) (sort_key t2)]
       If the same texts are repeatedly compared,
       pre-computation of sort_key gives better performance. *)
   val sort_key :
@@ -731,7 +731,7 @@
       | _ ->
         let key1 = key_of_inc prec col_info x1 in
         let key2 = key_of_inc prec col_info x2 in
-        Pervasives.compare key1 key2
+        Stdlib.compare key1 key2
 
   let compare ?locale ?prec ?variable t1 t2 =
     let col_info =
@@ -782,7 +782,7 @@
       | _ ->
         let key = key_of_inc prec col_info x in
         (*      Printf.printf "key_of_inc %s\n" (String.escaped key);*)
-        Pervasives.compare k key
+        Stdlib.compare k key
 
   let compare_with_key ?locale ?prec ?variable k t =
     let col_info =
diff -Naur a/Camomile/public/uCS4.ml b/Camomile/public/uCS4.ml
--- a/Camomile/public/uCS4.ml	2019-08-08 08:10:33.000000000 +0100
+++ b/Camomile/public/uCS4.ml	2020-01-12 18:28:47.635917994 +0000
@@ -140,5 +140,5 @@
 
 let compare (a:t) (b:t) =
   match Array1.dim a - Array1.dim b with
-    0 -> Pervasives.compare a b
+    0 -> Stdlib.compare a b
   | sgn -> sgn
diff -Naur a/Camomile/public/uTF8.ml b/Camomile/public/uTF8.ml
--- a/Camomile/public/uTF8.ml	2019-08-08 08:10:33.000000000 +0100
+++ b/Camomile/public/uTF8.ml	2020-01-12 18:28:47.642917787 +0000
@@ -194,7 +194,7 @@
 
 let iter proc s = iter_aux proc s 0
 
-let compare s1 s2 = Pervasives.compare s1 s2
+let compare s1 s2 = Stdlib.compare s1 s2
 
 exception Malformed_code
 
diff -Naur a/Camomile/toolslib/absCe.ml b/Camomile/toolslib/absCe.ml
--- a/Camomile/toolslib/absCe.ml	2019-08-08 08:10:33.000000000 +0100
+++ b/Camomile/toolslib/absCe.ml	2020-01-12 18:28:47.648917609 +0000
@@ -49,7 +49,7 @@
   | `FirstImplicit
   | `FirstTrailing ]
 
-module Elt = struct type t = elt let compare = Pervasives.compare end
+module Elt = struct type t = elt let compare = Stdlib.compare end
 module EltMap = Map.Make (Elt)
 
 type ce = AbsOrd.point * AbsOrd.point * AbsOrd.point
diff -Naur a/camomile-test/tester/test_uCol.ml b/camomile-test/tester/test_uCol.ml
--- a/camomile-test/tester/test_uCol.ml	2019-08-08 08:10:33.000000000 +0100
+++ b/camomile-test/tester/test_uCol.ml	2020-01-12 18:28:47.655917402 +0000
@@ -11,7 +11,7 @@
   if i >= UText.length t1 then
     if i >= UText.length t2 then 0 else ~-1
   else if i >= UText.length t2 then 1 else
-    match Pervasives.compare (UText.get t1 i) (UText.get t2 i) with
+    match Stdlib.compare (UText.get t1 i) (UText.get t2 i) with
       0 -> lex_compare_aux (i + 1) t1 t2
     | sgn -> sgn
 
@@ -189,7 +189,7 @@
       if Str.string_match comment_pat line 0 then () else
         let key = UTF8Comp.sort_key ?variable ~locale line in
         let sgn = sgn_of (UTF8Comp.compare ?variable ~locale !prev line) in
-        let sgn1 = sgn_of (Pervasives.compare !prev_key key) in
+        let sgn1 = sgn_of (Stdlib.compare !prev_key key) in
         let sgn2 = sgn_of 
             (UTF8Comp.compare_with_key ?variable ~locale !prev_key line) in
         let sgn3 = - sgn_of 
@@ -264,7 +264,7 @@
     | t :: rest ->
       let key = UTF8Comp.sort_key ?variable ~locale t in
       let sgn = sgn_of (UTF8Comp.compare ?variable ~locale prev t) in
-      let sgn1 = sgn_of (Pervasives.compare prev_key key) in
+      let sgn1 = sgn_of (Stdlib.compare prev_key key) in
       let sgn2 = sgn_of
           (UTF8Comp.compare_with_key ?variable ~locale prev_key t) in
       let sgn3 = - sgn_of
@@ -305,7 +305,7 @@
                             t 
                             (print_text_utf8 t) 
                             (String.escaped key)))
-              (Pervasives.compare prev t <= 0);
+              (Stdlib.compare prev t <= 0);
           expect_true
             ~msg:(lazy (sprintf 
                           "The comparison results differ\n\
